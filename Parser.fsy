/*   Parser spec. for simple imperative language      mrh 03-01 2014 */
%{ 
open AST
%}

%token <int> INT
%token <bool> BOOL
%token <string> STRING
%token <string> NAME
%token TRUE FALSE
%token ASG SKIP SEMI WHILE DO OD CONTOF LET IN END 
%token PROC CALL
%token COLON COMMA PRINT
%token LPAR RPAR
%token EOF

%start Main Exp ExpList DecList Stm StmList Dec Par ParList
%type <Exp> Exp
%type <Exp list> ExpList
%type <Dec> Dec
%type <Dec list> DecList
%type <Stm list> StmList
%type <Stm> Main Stm
%type <string> Par
%type <string list> ParList

%%

Main:
    Stm EOF                             { $1 }

Stm:
	NAME ASG Exp                         { Asg(Var $1,$3) }
  | WHILE Exp DO StmList OD				 { While($2,Seq $4) }
  | LET DecList IN StmList END           { Block($2,Seq $4) }
  | PRINT Exp                            { PrintLn $2 }
  | CALL NAME LPAR ParList RPAR { ProcCall($2, $4) }

StmList:
    Stm                                 { [$1] }
  | Stm SEMI StmList                    { $1 :: $3 } 

Dec: 
    NAME COLON Exp                       { VarDec($1,$3) }  
  | PROC NAME LPAR ParList RPAR Stm	 { ProcDec($2, $4, $6) }

DecList:
                                        { [] } 
   | Dec                                { [$1] }
   | Dec SEMI DecList                   { $1 :: $3 }
   		    
Exp:
    NAME                                 { Var $1  }
  | INT                                  { Int $1 }
  | BOOL                                 { Bool $1 }
  | STRING                               { String $1}
  | CONTOF Exp                           { ContOf $2 }        
  | LPAR Exp RPAR                        { $2 }
  | NAME LPAR ExpList RPAR               { Apply($1, $3) } 

ExpList:
                                        { [ ] }
  | Exp                                 { [$1]   }
  | Exp COMMA ExpList                   { $1 :: $3 }

Par:
	NAME				{ $1 }

ParList:
						{ [] }
	| Par				{ [$1] }
	| Par COMMA ParList { $1 :: $3 }